const inputElem=document.getElementById("input"),elemSelector=document.getElementById("select_elem"),langSelector=document.getElementById("select_lang"),pModeSelector=document.getElementById("point_mode"),decimalElem=document.getElementById("decimal_places"),outputElem=document.getElementById("output"),round=(num,precision=0)=>{const shiftedNum=Math.round(num*10**precision);if(0===precision)return shiftedNum;const unshiftedNum=shiftedNum*10**-precision,numStr=unshiftedNum+"",numPart=numStr.split(".");if(!numPart[1])return unshiftedNum;const roundErrFixed=+(numPart[0]+"."+numPart[1].slice(0,precision));return roundErrFixed},getCornersXY=attrs=>{const val=attr=>attrs[attr]?+attrs[attr].value:0,cornerArr=[];return cornerArr.push([val("x"),val("y")]),cornerArr.push([val("x")+val("width"),val("y")]),cornerArr.push([val("x")+val("width"),val("y")+val("height")]),cornerArr.push([val("x"),val("y")+val("height")]),cornerArr},DOMTransformer=function(TfList){const TfListLen=TfList.length;let matrixes=[];for(let i=0;i<TfListLen;i++)matrixes.push(TfList[i].matrix);this.applyXY=(x,y)=>{const point=new DOMPoint(x,y),domMatrix=new DOMMatrix;matrixes.forEach(eachMatrix=>domMatrix.multiplySelf(eachMatrix));const returnPoint=point.matrixTransform(domMatrix);return[returnPoint.x,returnPoint.y]}},getParsedElems=(elemHtmlVal,elemName)=>{const parsedDoc=(new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg">'+elemHtmlVal+"</svg>","image/svg+xml"),isDOMVaild=parsedDoc.getElementsByTagNameNS("http://www.w3.org/2000/svg",elemName);return!!isDOMVaild.length&&[...isDOMVaild]},attrsToHTML=(attrs,rule={})=>{let entries=[];const targetRule=rule.target||[],ignoreRule=rule.ignore||[];for(let eachAttr of attrs)entries.push([eachAttr.name,eachAttr.value]);ignoreRule.length?entries=entries.filter(each=>!ignoreRule.includes(each[0])):targetRule.length&&(entries=entries.filter(each=>targetRule.includes(each[0])));const attrsHTML=entries.map(each=>` ${each[0]}="${each[1]}"`).join("");return attrsHTML},convertPathValue=(pointArrs,precision=2,pointMode="relative")=>{let cmdFlag="M",d="",beforePoint=[0,0];return pointArrs.forEach(eachPArr=>{cmdFlag=""===d?"M":eachPArr[0]===beforePoint[0]?"V":eachPArr[1]===beforePoint[1]?"H":"L";const roundPArr=eachPArr.map((point,i)=>round("relative"===pointMode?point-beforePoint[i]:point,precision));beforePoint=eachPArr.slice(),d+="V"===cmdFlag?cmdFlag+roundPArr[1]:"H"===cmdFlag?cmdFlag+roundPArr[0]:cmdFlag+roundPArr.join()}),"relative"===pointMode&&(d=d.toLowerCase().replace("m","M")),d+="Z",d},convertPolygonValue=(pointArrs,precision=2)=>{let pointsStr="";return pointArrs.forEach(eachPArr=>{""!==pointsStr&&(pointsStr+=" ");const roundPArr=eachPArr.map(point=>round(point,precision));pointsStr+=roundPArr.join()}),pointsStr},convertProcess=()=>{const inputStr=inputElem.value,elemName=elemSelector.value,lang=langSelector.value,pointMode=pModeSelector.value,precision=+decimalElem.value,requireAttrs=["width","height"];if(!(inputStr&&elemName&&lang&&pointMode)||isNaN(precision))return outputElem.textContent="Invalid input",!1;const genOutputValue=elem=>{let outputValue="";const parsedElemAttrs=elem?elem.attributes:{},isVaildAttr=requireAttrs.every(attr=>parsedElemAttrs[attr]);if(!isVaildAttr)return outputElem.textContent="Invalid input",!1;const cornersXY=getCornersXY(parsedElemAttrs),DOMTf=new DOMTransformer(elem.transform.baseVal),transformedP=cornersXY.map(eachCorner=>DOMTf.applyXY(...eachCorner)),attrsHTML=attrsToHTML(parsedElemAttrs,{ignore:[...requireAttrs,"x","y","transform"]});let pointValue="";return"path"===elemName?(pModeSelector.disabled=!1,pointValue=convertPathValue(transformedP,precision,pointMode),outputValue=`<path d="${pointValue}"${attrsHTML}${"XML"===lang?" /":""}>`):(pModeSelector.disabled=!0,pModeSelector.value="relative",pointValue=convertPolygonValue(transformedP,precision),outputValue=`<polygon points="${pointValue}"${attrsHTML}${"XML"===lang?" /":""}>`),outputValue},parsedElems=getParsedElems(inputStr,"rect"),outputValue=parsedElems.map(genOutputValue).join("\n");outputElem.textContent=outputValue};inputElem.addEventListener("input",convertProcess),elemSelector.addEventListener("input",convertProcess),langSelector.addEventListener("input",convertProcess),decimalElem.addEventListener("input",convertProcess),pModeSelector.addEventListener("input",convertProcess);