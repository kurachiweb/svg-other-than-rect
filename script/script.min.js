const inputElem=document.getElementById("input"),elemSelector=document.getElementById("selectElem"),langSelector=document.getElementById("selectLang"),pModeSelector=document.getElementById("pointMode"),decimalElem=document.getElementById("decimalLength"),outputElem=document.getElementById("output"),round=(num,precision=0)=>{const shiftedNum=Math.round(num*10**precision);if(0===precision)return shiftedNum;const unshiftedNum=shiftedNum*10**-precision,numStr=unshiftedNum+"",numPart=numStr.split(".");if(!numPart[1])return unshiftedNum;const roundErrFixed=+(numPart[0]+"."+numPart[1].slice(0,precision));return roundErrFixed},inputFormatter=function(htmlVal){this.getValue=attr=>{const regex=new RegExp(attr+"=[\"'].*?[\"']"),matchAttrValue=htmlVal.match(regex);return!!matchAttrValue&&matchAttrValue[0].split(/\"|\'/)[1]}},getCornersXY=attrs=>{const cornerArr=[];return cornerArr.push([attrs.x,attrs.y]),cornerArr.push([attrs.x+attrs.width,attrs.y]),cornerArr.push([attrs.x+attrs.width,attrs.y+attrs.height]),cornerArr.push([attrs.x,attrs.y+attrs.height]),cornerArr},DOMTransformer=function(Tf=""){const tfArr=Tf.match(/\S+?\(.+?\)/g)||[],matrixes=tfArr.map(eachTF=>{const matrixArr=[1,0,0,1,0,0],funcName=eachTF.split("(")[0].toLowerCase(),values=eachTF.split("(")[1].match(/[\-\d.]+/g).map(x=>+x);return"matrix"===funcName?matchArr=values:"scale"===funcName||"scalex"===funcName?(matrixArr[0]=values[0],matrixArr[3]=values[1]||values[0]):"scaley"===funcName?matrixArr[3]=values[0]:"skew"===funcName||"skewx"===funcName?(matrixArr[1]=Math.tan(values[0]*Math.PI/180),values[1]&&(matrixArr[2]=Math.tan(values[1]*Math.PI/180))):"skewy"===funcName?matrixArr[2]=Math.tan(values[0]*Math.PI/180):"translate"===funcName||"translatex"===funcName?(matrixArr[4]=values[0],values[1]&&(matrixArr[5]=values[1])):"translatey"===funcName?matrixArr[5]=values[0]:"rotate"!==funcName&&"rotatez"!==funcName||(matrixArr[0]=Math.cos(values[0]*Math.PI/180),matrixArr[1]=Math.sin(values[0]*Math.PI/180),matrixArr[2]=-Math.sin(values[0]*Math.PI/180),matrixArr[3]=Math.cos(values[0]*Math.PI/180)),matrixArr});this.transXY=(x,y)=>{const point=new DOMPoint(x,y),domMatrix=new DOMMatrix;matrixes.forEach(eachMatrix=>domMatrix.multiplySelf(new DOMMatrix(eachMatrix)));const returnPoint=point.matrixTransform(domMatrix);return[returnPoint.x,returnPoint.y]}},allowAttrList=["x","y","width","height","transform"],requireAttrList=["x","y","width","height"],getTransformedP=htmlVal=>{const inputFormat=new inputFormatter(htmlVal),attrs={};allowAttrList.forEach(eachAttr=>{let value=inputFormat.getValue(eachAttr);value&&("transform"!==eachAttr&&(value=+value.replace("px","")),attrs[eachAttr]=value)});const isInputValid=requireAttrList.every(eachAttr=>attrs[eachAttr]);if(!isInputValid)return!1;const cornersXY=getCornersXY(attrs),DOMTf=new DOMTransformer(attrs.transform),transformedP=cornersXY.map(eachCorner=>DOMTf.transXY(...eachCorner));return transformedP},convertPathValue=(pointArrs,pointMode="relative",precision=2)=>{let cmdFlag="M",d="",beforePoint=[0,0];return pointArrs.forEach(eachPArr=>{cmdFlag=""===d?"M":eachPArr[0]===beforePoint[0]?"V":eachPArr[1]===beforePoint[1]?"H":"L";const roundPArr=eachPArr.map((point,i)=>round("relative"===pointMode?point-beforePoint[i]:point,precision));beforePoint=eachPArr.slice(),d+="V"===cmdFlag?cmdFlag+roundPArr[1]:"H"===cmdFlag?cmdFlag+roundPArr[0]:cmdFlag+roundPArr.join()}),"relative"===pointMode&&(d=d.toLowerCase().replace("m","M")),d+="Z",d},convertPolygonValue=(pointArrs,precision=2)=>{let pointsStr="";return pointArrs.forEach(eachPArr=>{""!==pointsStr&&(pointsStr+=" ");const roundPArr=eachPArr.map(point=>round(point,precision));pointsStr+=roundPArr.join()}),pointsStr},convertProcess=()=>{const inputStr=inputElem.value,elem=elemSelector.value,lang=langSelector.value,pointMode=pModeSelector.value,precision=+decimalElem.value,transformedP=getTransformedP(inputStr,pointMode,precision);let pointValue="";"path"===elem?(pointValue=convertPathValue(transformedP,pointMode,precision),outputElem.textContent=`<path d="${pointValue}"${"XML"===lang?" /":""}>`):(pointValue=convertPolygonValue(transformedP,precision),outputElem.textContent=`<polygon points="${pointValue}"${"XML"===lang?" /":""}>`)};inputElem.addEventListener("input",convertProcess),elemSelector.addEventListener("input",convertProcess),langSelector.addEventListener("input",convertProcess),decimalElem.addEventListener("input",convertProcess),pModeSelector.addEventListener("input",convertProcess);